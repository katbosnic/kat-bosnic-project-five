{"version":3,"sources":["firebase.js","Radio.js","NextButton.js","BackButton.js","SubmitButton.js","RetryButton.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Radio","props","react_default","a","createElement","react","aria-label","action","dataName","typeOfBin","type","name","value","data-name","onChange","id","htmlFor","NextButton","className","onClick","class","BackButton","SubmitButton","RetryButton","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","targetedItemVal","target","targetedItem","dataset","copyGarbageBin","toConsumableArray","state","usersGarbageBin","copyRecyclingBin","usersRecyclingBin","copyOrganicBin","usersOrganicBin","setState","checkArray","array","i","length","splice","bin","push","defineProperty","goToNextSet","currentRound","round","roundTwo","showPreviousButton","roundThree","showNextButton","showSubmitButton","document","querySelectorAll","forEach","input","checked","goToPreviousSet","roundOne","showRetry","showInfoBar","showInfo","hideInfoBar","showBrochure","hideBrochure","handleSubmit","scoreArray","compare","array1","array2","element1","element2","garbageItems","organicItems","recyclingItems","incorrect","compareCorr","array3","filter","obj","indexOf","wrongAnswers","concat","wrongItems","showWrongItems","score","refreshPage","window","location","reload","trashItems","showWasteNotList","_this2","database","ref","on","response","trashObj","val","trashItemsArr","garbageBinArr","recyclingBinArr","wasteWiseBinArr","newRoundThree","slice","newRoundOne","newRoundTwo","_this3","href","map","trashItem","index","src_Radio","key","src_BackButton","src_SubmitButton","src_NextButton","src_RetryButton","wrongItem","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0b94b888.chunk.js","sourcesContent":["import firebase from 'firebase';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n    apiKey: \"AIzaSyC_H5EWT43-q1rs42VXlOml0LDrcYjL9Rc\",\n    authDomain: \"waste-wise.firebaseapp.com\",\n    databaseURL: \"https://waste-wise.firebaseio.com\",\n    projectId: \"waste-wise\",\n    storageBucket: \"waste-wise.appspot.com\",\n    messagingSenderId: \"33013256112\",\n    appId: \"1:33013256112:web:9b215ee3e8943146\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;","import React, { Fragment } from 'react';\n\nconst Radio = (props) => {\n    return (\n        <Fragment>\n            <input\n                aria-label={props.action + props.dataName + props.typeOfBin}\n                type=\"radio\"\n                name={props.name}\n                value={props.value}\n                data-name={props.dataName}\n                onChange={props.onChange}\n                id={props.id + props.dataName}\n\n            />\n            <label htmlFor={props.id + props.dataName}></label>\n        </Fragment >\n    )\n}\n\nexport default Radio;","import React from 'react';\n\nconst NextButton = (props) => {\n    return (\n        <button className=\"btn next\" onClick={props.onClick}>Next <i class=\"fas fa-arrow-right\"></i></button>\n    )\n}\n\nexport default NextButton;","import React from 'react';\n\nconst BackButton = (props) => {\n    return (\n        <button className=\"btn previous\" onClick={props.onClick}><i class=\"fas fa-arrow-left\"></i> Back</button>\n    );\n\n}\n\nexport default BackButton;","import React from 'react';\n\nconst SubmitButton = (props) => {\n    return (\n        <button className=\"btn submit\" onClick={props.onClick}> Submit</button>\n    );\n\n}\n\nexport default SubmitButton;","import React from 'react';\n\nconst RetryButton = (props) => {\n    return (\n        <button className=\"btn retry\" onClick={props.onClick}> Retry</button>\n    );\n\n}\n\nexport default RetryButton;","import React, { Component } from 'react';\nimport firebase from './firebase.js';\nimport Radio from './Radio.js';\nimport NextButton from './NextButton.js';\nimport BackButton from './BackButton.js';\nimport SubmitButton from './SubmitButton.js';\nimport RetryButton from './RetryButton.js';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    // set states\n    this.state = {\n      trashItems: [],\n      garbageItems: [],\n      recyclingItems: [],\n      organicItems: [],\n      roundOne: [],\n      roundTwo: [],\n      roundThree: [],\n      currentRound: 'roundOne',\n      round: [],\n      usersGarbageBin: [],\n      usersRecyclingBin: [],\n      usersOrganicBin: [],\n      showPreviousButton: false,\n      showSubmitButton: false,\n      showNextButton: true,\n      showInfo: false,\n      showRetry: false,\n      score: 0,\n      wrongItems: [],\n      showWrongItems: false,\n      showWasteNotList: false\n    }\n  }\n\n  // connect to firebase data\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.on('value', (response) => {\n      const trashObj = (response.val());\n      // set trash items using firebase arrays\n      this.setState({\n        trashItems: trashObj.trashItemsArr,\n        garbageItems: trashObj.garbageBinArr,\n        recyclingItems: trashObj.recyclingBinArr,\n        organicItems: trashObj.wasteWiseBinArr\n      });\n\n      // set which items go in which rounds \n      const newRoundThree = this.state.trashItems.slice(0, 6);\n      const newRoundOne = this.state.trashItems.slice(6, 12);\n      const newRoundTwo = this.state.trashItems.slice(12, 18);\n\n      this.setState({\n        round: newRoundOne,\n        roundOne: newRoundOne,\n        roundTwo: newRoundTwo,\n        roundThree: newRoundThree\n      });\n\n    });\n  }\n\n\n  handleChange = (event) => {\n    // grab trash item name and the bins they go in\n    const targetedItemVal = event.target.value\n    const targetedItem = event.target.dataset.name\n\n    // create copies of the users trash bins\n    const copyGarbageBin = [...this.state.usersGarbageBin]\n    const copyRecyclingBin = [...this.state.usersRecyclingBin]\n    const copyOrganicBin = [...this.state.usersOrganicBin]\n\n    // set the state\n    this.setState({\n      usersGarbageBin: copyGarbageBin,\n      usersOrganicBin: copyOrganicBin,\n      usersRecyclingBin: copyRecyclingBin,\n    })\n\n    // DON'T WANT DUPLICATES OF ITEMS IN BINS \n    // an item can only exist once in one of the bins\n\n    // check to see if the selected trash item is in any of the bins \n    // if it does exist in any of the bins\n    // remove trash item from the bin\n    const checkArray = (array) => {\n      for (let i = 0; i < array.length; i++) {\n        if (array[i] === targetedItem) {\n          array.splice(i, 1);\n        }\n      }\n    }\n\n    // run the check on the copy\n    checkArray(copyGarbageBin);\n    checkArray(copyOrganicBin);\n    checkArray(copyRecyclingBin);\n\n    // set the state\n    const bin = [...this.state[targetedItemVal]]\n    bin.push(targetedItem)\n\n    this.setState({\n      [targetedItemVal]: bin\n    })\n\n  }\n\n  goToNextSet = () => {\n    // check current round\n    // if clicked go to next round\n    if (this.state.currentRound === 'roundOne') {\n\n      this.setState({\n        round: this.state.roundTwo,\n        currentRound: 'roundTwo',\n        showPreviousButton: true,\n      })\n    } else if (this.state.currentRound === 'roundTwo') {\n\n      this.setState({\n        round: this.state.roundThree,\n        currentRound: 'roundThree',\n        showNextButton: false,\n        showSubmitButton: true\n      })\n    }\n\n    // clear all inputs when user goes to next round\n    const inputs = document.querySelectorAll('input')\n\n    inputs.forEach(input => {\n      input.checked = false;\n    })\n\n  }\n\n  goToPreviousSet = () => {\n    // go to previous rounds on click of Back button\n    if (this.state.currentRound === 'roundTwo') {\n\n      this.setState({\n        round: this.state.roundOne,\n        currentRound: 'roundOne',\n        showPreviousButton: false,\n\n\n      })\n    } else if (this.state.currentRound === 'roundThree') {\n\n      this.setState({\n        round: this.state.roundTwo,\n        currentRound: 'roundTwo',\n        showNextButton: true,\n        showSubmitButton: false,\n        showRetry: false\n      })\n    }\n  }\n\n  // show the info bar \n  showInfoBar = () => {\n    this.setState({\n      showInfo: true\n    })\n  }\n\n  // hide the info bar\n  hideInfoBar = () => {\n    this.setState({\n      showInfo: false,\n      showBrochure: false\n    })\n  }\n\n  // show brochure\n  showBrochure = () => {\n    this.setState({\n      showBrochure: true,\n      showInfo: false\n    })\n  }\n\n  // hide the brochure\n  hideBrochure = () => {\n    this.setState({\n      showBrochure: false,\n      showInfo: true\n    })\n  }\n\n  // handle the submit\n  handleSubmit = () => {\n    // to get the score check to see if an element in the users bin matches an item in the actual bins and if it does push it to the score array -- then you will just have to get the length and append that to the page\n    const scoreArray = [];\n    const compare = (array1, array2) => {\n      array1.forEach((element1) => array2.forEach((element2) => {\n        if (element1 === element2) {\n          scoreArray.push(element1)\n        }\n      }))\n    }\n\n    compare(this.state.usersGarbageBin, this.state.garbageItems)\n    compare(this.state.organicItems, this.state.usersOrganicBin)\n    compare(this.state.usersRecyclingBin, this.state.recyclingItems)\n\n    // to find which items were placed in the wrong bin, filter out all the user items that are also found in the actual bin list \n    const incorrect = [];\n    const compareCorr = (array1, array2) => {\n      const array3 = array1.filter(function (obj) { return array2.indexOf(obj) == -1; });\n      incorrect.push(array3)\n    }\n\n    compareCorr(this.state.garbageItems, this.state.usersGarbageBin)\n    compareCorr(this.state.recyclingItems, this.state.usersRecyclingBin)\n    compareCorr(this.state.organicItems, this.state.usersOrganicBin)\n\n    // concatenate the arrays to create one long list of wrong answers \n    const wrongAnswers = incorrect[0].concat(incorrect[1], incorrect[2])\n    // set the state\n    // and on submit show the user their wrong items\n    this.setState({\n      wrongItems: wrongAnswers,\n      showWrongItems: true\n    })\n\n    // get the length of the score array to get a score\n    // hide submit button and show retry button\n    const score = scoreArray.length\n    this.setState({\n      score: score,\n      showSubmitButton: false,\n      showRetry: true\n    })\n  }\n\n  // on click of refresh button, refresh the page\n  refreshPage = () => {\n    window.location.reload();\n  }\n\n  render() {\n    return (\n      <div className=\"App\" >\n        <header>\n          <h1>Waste-Wise!</h1>\n\n          {/* on click change the state of showInfo to true */}\n          <button className=\"information-btn\" onClick={this.showInfoBar}><i className=\"fas fa-info-circle\"></i></button>\n\n          {/* show info if showInfo is true */}\n          {this.state.showInfo ?\n            <div className=\"info\">\n              <button onClick={this.hideInfoBar}><i className=\"fas fa-times\"></i></button>\n              <h2>How to Play?</h2>\n              <ol className=\"info-container\">\n                <li>First, take a look at the <a href=\"#\" onClick={this.showBrochure}>Wastenot Farms item list</a>!</li>\n                <li>Then, go through the quiz and place the items in whichever bin you think they belong! But remember, Wastenot Farms' green bins can accept items that you might not expect!</li>\n                <li>Select the green circle for Wastenot organic waste, blue circle for recycling, and black circle for everything else.</li>\n                <li>Then hit submit, scroll down to the bins and find out how much waste wisdom you posess!</li>\n              </ol>\n              <h3>What is Wastenot Farms?</h3>\n              <div className=\"info-container\">\n                <p><a target=\"_blank\" href=\"http://wastenotfarms.com/\">Wastenot Farms</a> is a Toronto based earthworm hatchery that offers <a target=\"_blank\" href=\"http://wastenotwormfarms.com/workplacefoodwasterecycling/\">Green Bins Growing</a> food waste pickup and delivery service.</p>\n              </div>\n            </div> : null}\n          {this.state.showBrochure ?\n            <div className=\"brochure info\">\n              <button onClick={this.hideBrochure}><i className=\"fas fa-times\"></i></button>\n              <h2>What can go in Wastenot green bins?</h2>\n              <div className=\"info-container\">\n                <p>The general rule of thumb is \"if it was a plant or animal at one time, it can go in the bin\".</p>\n                <p>Always check to see if packaging is labelled as compostable!</p>\n                <p>Coffee cups can only go in the bin if they are labelled as compostable, otherwise they go in the garbage.</p>\n                <p>Any food waste can go in the bin, including meat, citrus, coffee grinds, and tea bags.</p>\n                <p>Even paper can go in the bin as along as it is not coloured, glossy, or waxed.</p>\n              </div>\n            </div> : null}\n        </header>\n        <div className=\"wrapper\">\n          <div className=\"game-field\">\n            <ul className=\"trash-card-container\">\n              {/* map through the current round */}\n              {this.state.round.map((trashItem, index) => {\n                return (\n                  <form className=\"trash-card-and-inputs\">\n\n                    <Radio\n                      value=\"usersOrganicBin\"\n                      name={index}\n                      dataName={trashItem}\n                      onChange={this.handleChange}\n                      id=\"1\"\n                      typeOfBin=\" in organic\"\n                      action=\"place \"\n                    />\n                    <Radio\n                      value=\"usersRecyclingBin\"\n                      name={index}\n                      dataName={trashItem}\n                      onChange={this.handleChange}\n                      id=\"2\"\n                      typeOfBin=\" in recycling\"\n                      action=\"place \"\n                    />\n\n                    <Radio\n                      value=\"usersGarbageBin\"\n                      name={index}\n                      dataName={trashItem}\n                      onChange={this.handleChange}\n                      id=\"3\"\n                      typeOfBin=\" in garbage\"\n                      action=\"place \"\n                    />\n                    <li className=\"trash-card\" key={index}>\n                      <p>{trashItem}</p>\n                    </li>\n                  </form>\n                )\n              })}\n            </ul>\n            <div className=\"proceed-buttons clearfix\">\n              {/* if showPreviousButton is set to true show BackButton else null */}\n              {this.state.showPreviousButton ? <BackButton onClick={this.goToPreviousSet} /> : null}\n              {/* same as above but with submitButton */}\n              {this.state.showSubmitButton ? <SubmitButton onClick={this.handleSubmit} /> : null}\n              {/* same as above but with NextButton */}\n              {this.state.showNextButton ? <NextButton onClick={this.goToNextSet} /> : null}\n              {/* same as above but with showRetry */}\n              {this.state.showRetry ? <RetryButton onClick={this.refreshPage} /> : null}\n            </div>\n          </div>\n        </div>\n\n        {/* below append the users choices in the bins */}\n        <div className=\"trash-bins\">\n          <div className=\"score\"><p>Score:</p><p>{this.state.score}/18</p></div>\n          <div className=\"organic bin\">\n            <i className=\"fas fa-seedling\"></i>\n            {this.state.usersOrganicBin.map((trashItem) => {\n              return (\n                <ul className=\"trash-item-list\">\n                  <li>{trashItem}</li>\n                </ul>\n              )\n            })}\n          </div>\n          <div className=\"recycling bin\">\n            <i className=\"fas fa-recycle\"></i>\n            {this.state.usersRecyclingBin.map((trashItem) => {\n              return (\n                <ul className=\"trash-item-list\">\n                  <li>{trashItem}</li>\n                </ul>\n              )\n            })}\n          </div>\n          <div className=\"garbage bin\">\n            <i className=\"far fa-trash-alt\"></i>\n            {this.state.usersGarbageBin.map((trashItem) => {\n              return (\n                <ul className=\"trash-item-list\">\n                  <li> {trashItem}</li>\n                </ul>\n              )\n            })}\n          </div>\n          {/* only append the incorrect choices once the user has submited */}\n          <div className=\"incorrect bin\">\n            <i class=\"far fa-times-circle\"></i>\n            {this.state.wrongItems.map((wrongItem) => {\n              return (\n                <ul className=\"trash-item-list\">\n                  <li>{wrongItem}</li>\n                </ul>\n              )\n            })}\n          </div>\n        </div>\n        <footer><p>Made by <a target=\"_blank\" href=\"http://katbosnic.com\"> Kat Bosnic</a></p></footer>\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}